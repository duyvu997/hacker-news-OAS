---
openapi: "3.0.0"
info:
  title: "Hacker News Server"
  version: "1.0.0"
  description: "This is a APIs of Hacker New server."
servers:
  - url: https://example.com
tags:
  - name: User
  - name: Post
  - name: Categories
  - name: Auth
  - name: Admin
paths:

  #-----------USER--------------------------------------------------------------------------------------------------------------------------------
  /users:
    get:
      tags:
        - User
      summary: "Get user's information"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInformation"
        400:
          description: "Bad request"
        404:
          description: "Not found"
      security:
        - bearerAuth: []
    post:
      tags:
        - "User"
      summary: "Create user"
      description: "This can be done by the normal user."
      operationId: "createUser"
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/User"
                - type: object
                  properties:
                    dryrun:
                      type: boolean
                      description: when dryrun is `true` server should verify and return. should not create new object in db
        description: "Created user"
        required: true
      responses:
        default:
          description: "Successful operation"
  /users/{id}:
    put:
      tags:
        - "User"
      summary: "Update user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          description: "id of user that need to be updated"
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: "Updated user object"
        required: true
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
      security:
        - bearerAuth: []
    delete:
      tags:
        - "User"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      parameters:
        - in: "path"
          name: "username"
          schema:
            type: "string"
          description: "The name that needs to be deleted"
          required: true
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      security:
        - bearerAuth: []
  /users/login:
    post:
      tags:
        - "User"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      requestBody:
        required: true
        description: "Login user input"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
              example:
                'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwidXNlcm5hbWUiOiJqb2huMDkwOSIsImlhdCI6MTUxNjIzOTAyMn0.aj5KcumubmGe3Twtm7vLWbe7Ljt806Hj_OmqVsbjGVU \
                Please decode for more information: using https://jwt.io/'
        400:
          description: "Invalid username/password supplied"
  /users/change-password:
    put:
      tags:
        - "User"
      summary: User change password
      description: This is api to allow user change password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserChangePassword"
      responses:
        default:
          description: "Successful operation"
  
  #-----------POST--------------------------------------------------------------------------------------------------------------------------------
  /users/{id}/posts:
    get:
      tags:
        - Post
      summary: "Get posts"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          description: "id of user that need to be updated"
          required: true
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Posts"
        400:
          description: "Bad request"
        404:
          description: "Not found"
      security:
        - bearerAuth: []
  /posts:
    get:
      tags:
        - Post
      summary: "Get posts"
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        
        - in: query
          name: postType
          schema:
            type: string
            enum: [Top, New, Category1, Category2]
          required: false
          description: "Get posts by post type"
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Posts"
        400:
          description: "Bad request"
        404:
          description: "Not found"
    post: 
      tags:
        - Post
      summary: "Create post"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePostBody"
        required: true
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        400:
          description: "Bad request"
        404:
          description: "Not found"
      security:
        - bearerAuth: []
  #-----------CATEGORIES--------------------------------------------------------------------------------------------------------------------------
  #-----------AUTH--------------------------------------------------------------------------------------------------------------------------------

  #-----------ADMIN-------------------------------------------------------------------------------------------------------------------------------
  /verify-code:
    post:
      tags:
        - "Auth"
      summary: "Submit code to verify user by username."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyCodeBody"
        required: true
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Bad request"
        404:
          description: "Not found"
  /reset-password:
    post:
      tags:
        - "Auth"
      summary: "Reset password"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordBody"
        required: true
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Bad request"
        404:
          description: "Not found"
  /re-activate:
    post:
      tags:
        - "Auth"
      summary: "Resend email to activated"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordBody"
        required: true
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Bad request"
        404:
          description: "Not found"

components:
  #------------------------------------------------------------------#
  schemas:
    ##------------------------
    User:
      $ref: "./components/schemas/user.yml#/User"
    UserInformation:
      $ref: "./components/schemas/user.yml#/UserInformation"

    ##------------------------
    Post: 
      $ref: "./components/schemas/post.yml#/Post" 
    CreatePostBody: 
      $ref: "./components/schemas/post.yml#/CreatePostBody" 
    Posts: 
      $ref: "./components/schemas/post.yml#/Posts"
    ##------------------------
    VerifyCodeBody:
      $ref: "./components/schemas/auth.yml#/VerifyCodeBody"
    ResetPasswordBody:
      $ref: "./components/schemas/auth.yml#/ResetPasswordBody"
    LoginResponse:
      $ref: "./components/schemas/auth.yml#/LoginResponse"
    LoginRequest:
      $ref: "./components/schemas/auth.yml#/LoginRequest"
    UserTokenSchema:
      $ref: "./components/schemas/auth.yml#/UserTokenSchema"
  #------------------------------------------------------------------#
  parameters:
    offset:
      $ref: "./components/parameters/general-parameter.yml#/offset"
    limit:
      $ref: "./components/parameters/general-parameter.yml#/limit"
  #------------------------------------------------------------------#
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  #------------------------------------------------------------------#
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
externalDocs:
  description: "More details"
  url: "http://swagger.io"
